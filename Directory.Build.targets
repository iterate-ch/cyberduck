<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright (c) 2002-2019 iterate GmbH. All rights reserved.
  ~ https://cyberduck.io/
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  -->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Sdk Name="Microsoft.Build.CentralPackageVersions" Version="2.0.41" />

  <PropertyGroup>
    <AssemblySearchPaths>$(LibDir);$(AssemblySearchPaths)</AssemblySearchPaths>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
    <LibDirFramework Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net472'))">net472</LibDirFramework>
    <LibDirFramework Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net8.0'))">net8.0</LibDirFramework>
    <AssemblySearchPaths Condition=" '$(LibDirFramework)' != '' ">$(LibDir)$(LibDirFramework)\;$(AssemblySearchPaths)</AssemblySearchPaths>
  </PropertyGroup>

  <PropertyGroup Condition= " '$(TargetFramework)' != 'net472' ">
    <DefaultItemExcludes>$(DefaultItemExcludes);**/*net472*</DefaultItemExcludes>
  </PropertyGroup>
  <PropertyGroup Condition= " !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net8.0')) ">
    <DefaultItemExcludes>$(DefaultItemExcludes);**/*net8.0*</DefaultItemExcludes>
  </PropertyGroup>

  <ItemGroup>
    <CyberduckReference Update="Bonjour">
      <ProjectPath>$(CyberduckDir)bonjour\dll\Cyberduck.Bonjour.msbuildproj</ProjectPath>
    </CyberduckReference>
    <CyberduckReference Update="Bonjour.Native">
      <ProjectPath>$(CyberduckDir)bonjour\src\main\csharp\Cyberduck.Bonjour.Native.csproj</ProjectPath>
    </CyberduckReference>
    <CyberduckReference Update="Cli">
      <ProjectPath>$(CyberduckDir)cli\dll\Cyberduck.Cli.msbuildproj</ProjectPath>
    </CyberduckReference>
    <CyberduckReference Update="Core">
      <ProjectPath>$(CyberduckDir)core\dll\Cyberduck.Core.msbuildproj</ProjectPath>
    </CyberduckReference>
    <CyberduckReference Update="Core.Native">
      <ProjectPath>$(CyberduckDir)core\src\main\csharp\Cyberduck.Core.Native.csproj</ProjectPath>
    </CyberduckReference>
    <CyberduckReference Update="Core.Refresh">
      <ProjectPath>$(CyberduckDir)core\native\refresh\src\main\csharp\Cyberduck.Core.Refresh.csproj</ProjectPath>
    </CyberduckReference>
    <CyberduckReference Update="Cryptomator">
      <ProjectPath>$(CyberduckDir)cryptomator\dll\Cyberduck.Cryptomator.msbuildproj</ProjectPath>
    </CyberduckReference>
    <CyberduckReference Update="Importer">
      <ProjectPath>$(CyberduckDir)importer\dll\Cyberduck.Importer.msbuildproj</ProjectPath>
    </CyberduckReference>
    <CyberduckReference Update="Protocols">
      <ProjectPath>$(CyberduckDir)protocols\dll\Cyberduck.Protocols.msbuildproj</ProjectPath>
    </CyberduckReference>

    <CyberduckProjectReference Include="@(CyberduckReference->HasMetadata('ProjectPath'))" Condition=" '$(BuildProjectReferences)'=='true' " />
    <CyberduckLibraryReferences Include="@(CyberduckReference->'Cyberduck.%(Identity)')" Exclude="@(CyberduckProjectReference)" />
    <ProjectReference Include="@(CyberduckProjectReference->'%(ProjectPath)')">
      <Name>Cyberduck.%(Identity)</Name>
    </ProjectReference>
    <Reference Include="@(CyberduckLibraryReferences)" />
  </ItemGroup>

  <PropertyGroup Condition=" '$(NETCoreSdkVersion)'!='' ">
    <!-- Treat SDK 6.0.301 as last known to work. -->
    <NETSDKBeforeFeature>$([MSBuild]::VersionLessThanOrEquals('$(NETCoreSdkVersion)', '6.0.301'))</NETSDKBeforeFeature>
    <NETSDKAfterFix>$([MSBuild]::VersionGreaterThanOrEquals('$(NETCoreSdkVersion)', '6.0.401'))</NETSDKAfterFix>
    <CoreCompileDependsOn Condition="!($(NETSDKBeforeFeature) or $(NETSDKAfterFix))">SDKFix_RemoveDuplicateAnalyzers;$(CoreCompileDependsOn)</CoreCompileDependsOn>
  </PropertyGroup>

  <Target Name="SDKFix_RemoveDuplicateAnalyzers">
    <ItemGroup>
      <FilteredAnalyzer Include="@(Analyzer-&gt;Distinct())" />
      <Analyzer Remove="@(Analyzer)" />
      <Analyzer Include="@(FilteredAnalyzer)" />
      <FilteredAnalyzer Remove="@(FilteredAnalyzer)" />
    </ItemGroup>
  </Target>

</Project>